plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'kr.co'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}


javadoc {
    options.encoding = 'UTF-8'
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    mapstructVersion = "1.5.5.Final"
    queryDSLVersion = "5.0.0"
    jjwtVersion = "0.12.6"
    jasyptVersion = "3.0.5"
    snippetsDir = file("build/generated-snippets")
}

repositories {
    mavenCentral()
}

dependencies {
    // DB
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    // utils
    implementation 'org.apache.commons:commons-lang3:3.12.0' // 최신 버전을 사용

    // restful tool
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'


    // jpa hibernate && queryDSL
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.querydsl:querydsl-jpa:${queryDSLVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDSLVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // security
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Jasypt
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}"
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    //////////// test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'


    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')

    // Spring REST Docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'



}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

/**
 * QueryDSL
 * */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

/**
 * REST DOCS
 * */
asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
    sources {
        include("**/index.adoc")
    }
    // 다크테마
    attributes 'source-highlighter': 'highlight.js'
    //Asciidoctor에 snippetsDir 경로를 전달하여 스니펫 참조를 가능함
    attributes 'snippets': snippetsDir
    // 경로를 baseDir로 맞춰준다!
    baseDirFollowsSourceFile()
}

task copyDocument(type: Copy) { // (12)
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        include("**/index.html")
    }
    into file("src/main/resources/static/docs")
}

build.doFirst {
    delete file('build/generated/**')
}

build {
    dependsOn copyDocument
}

clean {
    delete file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}